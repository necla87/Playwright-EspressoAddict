import { Given, When, Then } from '@cucumber/cucumber';
import { expect } from 'chai';
import {
  navigateTo,
  getWhereIAm,
  waitForEvent,
  getValueOfScores,
  getAllCurrentMenuChoices,
  getMenuChoiceElement,
} from './helpers.js';

let initialHealth = 0;

Given('that I have started the game by navigating to {string}', async function (url) {
  await navigateTo(this.world, url);
  const position = await getWhereIAm(this.world);
  expect(position).to.equal('outside the cafe');
});

Given('that I make the choice to {string}', async function (choice) {
  const { choiceElements, choices } = await getAllCurrentMenuChoices(this.world);
  const index = choices.indexOf(choice);
  expect(index).to.be.above(-1);
  await choiceElements[index].click();
});

Then('my position should be {string}', async function (expectedPosition) {
  const currentPosition = await getWhereIAm(this.world);
  expect(currentPosition).to.equal(expectedPosition);
});

When('I wait for the event {string} to take place', async function (event) {
  await waitForEvent(this.world, event);
});

Then('my hipster bag should contain {string}', async function (expectedContent) {
  const bagContent = await this.world.get('.hipster-bag .content').getText();
  expect(bagContent).to.equal(expectedContent);
});

Then('my health should be {string}', async function (healthChange) {
  const currentHealth = await getValueOfScores(this.world, 'health');
  const expectedHealth = initialHealth + parseInt(healthChange.split(' ')[0], 10);
  expect(currentHealth).to.equal(expectedHealth);
});

Then('the value of my {string} should be {int}', async function (scoreType, expectedValue) {
  const actualValue = await getValueOfScores(this.world, scoreType.toLowerCase());
  expect(actualValue).to.equal(expectedValue);
});

Then('I should be given the new choice {string}', async function (expectedChoice) {
  const { choices } = await getAllCurrentMenuChoices(this.world);
  expect(choices).to.include(expectedChoice);
});

Given('I record my initial health', async function () {
  initialHealth = await getValueOfScores(this.world, 'health');
});
